name: Release

on:
  push:
    tags:
      - v*
  workflow_dispatch:
    inputs:
      bump-type:
        description: Bump type
        required: true
        default: patch
        type: choice
        options:
          - major
          - minor
          - patch

jobs:
  prepare:
    name: Prepare Release
    runs-on: ubuntu-latest
    outputs:
      tag: v${{ steps.semver.outputs.version }}
      release-notes: ${{ steps.release-notes.outputs.release_notes }}
      prerelease: ${{ steps.semver.outputs.prerelease }}
    steps:
      - name: Dump GitHub context
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: echo "$GITHUB_CONTEXT"

      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch history for all branches and tags

      # In order to make a commit, we need to initialize a user.
      - name: Create Robot user
        run: |
          git config user.name "github-bot :robot:"
          git config user.email noreply@github.com

      - name: Bump version
        if: ${{ github.event_name == 'workflow_dispatch' }}
        id: bump
        uses: callowayproject/bump-my-version@v1
        with:
          args: ${{ inputs.bump-type }} --no-commit --no-tag

      - name: Stage modified files
        if: steps.bump.outputs.bumped == 'true'
        run: |
          echo "Version was bumped from ${{ steps.bump.outputs.previous-version }} to ${{ steps.bump.outputs.current-version }}"
          git add .

      - name: Validate version input
        id: semver
        uses: matt-usurp/validate-semver@v2
        with:
          version: >
            ${{
              (github.event_name == 'push' &&
              github.event.created &&
              github.ref_type == 'tag') &&
              github.ref_name || steps.bump.outputs.current-version
            }}

      # from here on, the version number is available as ${{ steps.semver.outputs.version }}

      - name: Update Changelog
        if: ${{ github.event_name == 'workflow_dispatch' && !steps.semver.outputs.prerelease }}
        uses: thomaseizinger/keep-a-changelog-new-release@3.1.0
        with:
          tag: v${{ steps.semver.outputs.version }}

      - name: Stage Changelog
        if: ${{ github.event_name == 'workflow_dispatch' && !steps.semver.outputs.prerelease }}
        run: git add CHANGELOG.md

      - name: Extract Release Notes
        id: release-notes
        uses: ffurrer2/extract-release-notes@v2.2.0
        with:
          prerelease: ${{ steps.semver.outputs.prerelease }}

      - name: Create tag and push
        if: ${{ github.event_name == 'workflow_dispatch' }}
        run: |
          git commit -m "Prepare release v${{ steps.semver.outputs.version }}"
          git tag v${{ steps.semver.outputs.version }}
          git push
          git push origin v${{ steps.semver.outputs.version }}

  build:
    name: Build
    needs: prepare
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          version: "0.6.8"
          enable-cache: true

      - name: Build Package
        run: uv build

      # Check that basic features work and we didn't miss to include crucial files
      - name: Smoke test (wheel)
        run: uv run --isolated --no-project -p 3.13 --with dist/*.whl test/smoke_test.py
      - name: Smoke test (source distribution)
        run: uv run --isolated --no-project -p 3.13 --with dist/*.tar.gz test/smoke_test.py

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: package
          path: dist/
          retention-days: 1

  publish:
    name: Release on GitHub
    needs: [build, prepare]
    runs-on: ubuntu-latest
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: package
          path: dist/

      - run: ls -la dist

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: dist/*
          tag_name: ${{ needs.prepare.outputs.tag }}
          body: ${{ needs.prepare.outputs.release-notes }}
          prerelease: ${{ needs.prepare.outputs.prerelease != '' }}

  pypi:
    name: Publish to PyPI
    needs: [build, prepare]
    if: ${{ !needs.prepare.outputs.prerelease }}
    runs-on: ubuntu-latest
    environment:
      name: release
    permissions:
      contents: read
      id-token: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          version: "0.6.8"
          enable-cache: true

      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: package
          path: dist/

      # - name: Publish to PyPI
      #   run: uv publish --trusted-publishing always
